# -*- coding: utf-8 -*-
"""RSENSVM8-8.ipynb

Automatically generated by Colaboratory.
@author: Mohammed Qaraad 

Original file is located at
    https://colab.research.google.com/drive/1RN5wJVDJCG_LsdBV9Ve98PLoaVsT2HMd
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
import csv
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
import random
from google.colab import drive
drive.mount('/content/drive')
from sklearn.model_selection import StratifiedKFold
from sklearn import metrics
from sklearn.linear_model import ElasticNet
from collections import Counter
import tarfile
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import StratifiedKFold
from sklearn import metrics
from sklearn.metrics import roc_curve, auc
from numpy import interp
from sklearn.model_selection import RandomizedSearchCV
from sklearn.utils.fixes import loguniform

from  warnings import simplefilter
from sklearn.exceptions import ConvergenceWarning
simplefilter("ignore", category=ConvergenceWarning)
random_s = np.random.RandomState(0)

"""# **RandomizedSearchCV with FS**"""

# 'golub.tar.gz','gordon.tar.gz','singh.tar.gz','west.tar.gz'
# 'chin.tar.gz','alon.tar.gz','chowdary.tar.gz'
# ,'singh.tar.gz','west.tar.gz'
# 'gordon.tar.gz','golub.tar.gz'
data_set_name=['chin.tar.gz']
# data_set_name=['west.tar.gz']
plt.figure(figsize=(8,8))
plt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r',
         label='Luck', alpha=.8)    
# AUCDF = pd.DataFrame()
# SENDF = pd.DataFrame()
# SPECDF = pd.DataFrame()
import time
start = time.time()
random_s = np.random.RandomState(0)

for i in data_set_name:
  d= i.split('.')[0]
  print(d)
  file='/content/drive/My Drive/Colab Notebooks/data/'+i
  datasetname=d

  min_max_scaler = MinMaxScaler()
  with tarfile.open(file, "r:*") as tar:
    csv_path = tar.getnames()
    if(d == 'singh' or d == 'west'):
      labels = pd.read_csv(tar.extractfile(csv_path[1]), header=None)
      feature = pd.read_csv(tar.extractfile(csv_path[0]), header=None)

    else:
      labels = pd.read_csv(tar.extractfile(csv_path[0]), header=None)
      feature = pd.read_csv(tar.extractfile(csv_path[1]), header=None)
  headers = list(feature.columns)
  features = np.asarray(feature.values)
  features = min_max_scaler.fit_transform(feature)
  labels = np.transpose(np.asarray(labels.values.ravel() - 1, dtype=int))
  print(features.shape, labels.shape)

  counter = Counter(labels)
  print(counter)
  
  Max_iterations=50  # Maximum Number of Iterations
  correction_factor = 2.0 # Correction factor
  inertia = 1.0 # Ineritia Coeffecient
  swarm_size = 20 # Number of particles
  LB=1e-4*np.ones((1,2))
  UB=1e-3*np.ones((1,2))

  Xrange=UB[0,0]-LB[0,0]
  Yrange=UB[0,1]-LB[0,1]
  Dim=UB.shape[1]

  fold_N=0  # Number of runs
  cv = StratifiedKFold(n_splits=10,shuffle=True,random_state=random_s)

  #evaluated matrix
  max_fold=10
  Accuracy=np.zeros((max_fold))
  Precision=np.zeros((max_fold))
  Recall=np.zeros((max_fold))
  ResultsTestingAcc = np.zeros((max_fold))
  TP=[]
  FP=[]
  TN=[]
  FN=[]

  Specificity = np.zeros((max_fold))
  Sensitifity = np.zeros((max_fold))
  AUC = np.zeros((max_fold))

  tprs = []
  aucs = []
  mean_fpr = np.linspace(0, 1, 100)
  BestAlpha=np.zeros((max_fold))

  NoRun=1
  # AUCmatrix=np.zeros((Max_iterations,max_fold))
  # SENmatrix=np.zeros((Max_iterations,max_fold))
  # SPECmatrix=np.zeros((Max_iterations,max_fold))


  for r in range(0,NoRun):
    fold_N=0
    i=0
    lines=["-",":","--","-."]
    for train_index, test_index in cv.split(features,labels):
      Swarm=np.zeros((swarm_size,2))
      PreviouBest=float('inf')* np.ones((Max_iterations,3))
      # Initial best value so far
      # GlobalBestSolution=float('inf')
      # BestSolns=float('inf')* np.ones((swarm_size,2))
      gBestPos   = [0] * 1
      gBestValue = float("inf") 
      #store Global Best Position and Solution For Current Run 
    
	    
      # Initial velocity
      # Velocity=np.zeros((swarm_size,2))
      Fval=np.zeros((Max_iterations))

      

      for iter in range(Max_iterations):
        # Calculating fitness value for all particles    
        #print('Iteration Number ', iter )
        Xtrain, Xtest =  features[train_index], features[test_index]
        ytrain, ytest = labels[train_index], labels[test_index]

        parameter_grid=[{'alpha': loguniform(1e-4, 1e-3)}]
      
        #clf = GridSearchCV(estimator=svm.SVC(),cv=1, param_grid=parameter_candidates, n_jobs=-1)
        clf = RandomizedSearchCV(ElasticNet(), parameter_grid, n_iter=1, scoring='r2', n_jobs=-1, random_state=random_s)
        #clf.fit(x_train, y_train)
        clf.fit(Xtrain, ytrain) 
        #claculate Fitness 
        #print("iteration ", iter , 'Param', clf.best_estimator_.alpha)
        elasticNet=ElasticNet(alpha=clf.best_estimator_.alpha,random_state=random_s)
        elasticNet.fit(Xtrain,ytrain)
        data_el= elasticNet.coef_
        gains = np.asarray(data_el)
        indexes = np.where(gains != 0)[0]
        # print('indexes type', type(indexes) , indexes.shape)
        if(indexes.shape[0]== 0):
          continue

        xtrain = Xtrain[:, indexes]
        xtest = Xtest[:, indexes]
        #xtrain, xvalidation, ytrain, yvalidation = train_test_split(xtrain,y_train,test_size = 0.11)



        svclassifier = SVC(kernel='rbf',verbose=0, random_state=random_s)  
        svclassifier.fit(xtrain, ytrain)
        ypred = svclassifier.predict(xtest)
        # #calculate AUC SEN SPEC 
        # conf_matrix = confusion_matrix(ytest, ypred)
        # TP.append(conf_matrix[1][1])
        # TN.append(conf_matrix[0][0])
        # FP.append(conf_matrix[0][1])
        # FN.append(conf_matrix[1][0])
        # conf_sensitivity = (conf_matrix[1][1] / float(conf_matrix[1][1] + conf_matrix[1][0]))
        # TPR=conf_sensitivity
        # SENmatrix[iter][fold_N]=conf_sensitivity
        # conf_specificity = (conf_matrix[0][0] / float(conf_matrix[0][0] + conf_matrix[0][1]))
        # FPR= (1 - conf_specificity)
        # SPECmatrix[iter][fold_N]=conf_specificity
        # auC= (float(1+TPR - FPR)/2)
        # AUCmatrix[iter][fold_N]=auC






            
        ValidationError=sum(ypred==ytest)*100/xtest.shape[0]
        Fval[iter]= 100 - ValidationError

            
        if Fval[iter]<PreviouBest[iter,2]:
          PreviouBest[iter,0]=clf.best_estimator_.alpha # Update the position of the first dimension
          PreviouBest[iter,1]=0 # Update the position of the second dimension
          PreviouBest[iter,2]=Fval[iter]          # Update best value

        #calculate global solu and position for current Run 
        if Fval[iter] < gBestValue:
          gBestValue = Fval[iter]
          gBestPos   = clf.best_estimator_.alpha  




      print('fold_N = ', fold_N , ' Best value of Alpha = ', gBestPos,   'with fitness value = ', gBestValue)
      BestAlpha[fold_N]= gBestPos
      #ResultsValidation[r][fold_N]=gBestValue
      #fold_best_postion[fold_N]= gBestPos

      F_train, F_test =  features[train_index], features[test_index]
      z_train, z_test = labels[train_index], labels[test_index]

      #claculate Fitness 
      elasticNet=ElasticNet(alpha=gBestPos,random_state=random_s)
      elasticNet.fit(F_train,z_train)
      data_el= elasticNet.coef_
      gains = np.asarray(data_el)
      indexes = np.where(gains != 0)[0]
      #print(indexes.shape)
      if(indexes.shape[0]== 0):
        continue

      f_train = F_train[:, indexes]
      f_test = F_test[:, indexes]
    
      svclassifier = SVC(kernel='rbf', verbose=0, random_state=random_s)
      svclassifier.fit(f_train, z_train)
      ypred = svclassifier.predict(f_test)
      #y_true = y_test
      TestingError=sum(ypred==z_test)*100/z_test.shape[0]
      print('TestingError = ', TestingError)
      ResultsTestingAcc[fold_N]=100-TestingError;
      #SV[r]= svclassifier.n_support_
      #print('fold_N testing error ', 100-TestingError)
      fpr, tpr, t = roc_curve(z_test, ypred)
      #print('fpr ',fpr) 
      #print('tpr',tpr)
      tprs.append(interp(mean_fpr, fpr, tpr))
      roc_auc = auc(fpr, tpr)
      aucs.append(roc_auc)
      # i= i+1
      conf_matrix = confusion_matrix(z_test, ypred)
      # TP.append(conf_matrix[1][1])
      # TN.append(conf_matrix[0][0])
      # FP.append(conf_matrix[0][1])
      # FN.append(conf_matrix[1][0])
      # conf_sensitivity = (conf_matrix[1][1] / float(conf_matrix[1][1] + conf_matrix[1][0]))
      # TPR=conf_sensitivity
      sensitivity1 = conf_matrix[0,0]/(conf_matrix[0,0]+conf_matrix[0,1])

      Sensitifity[fold_N]=sensitivity1
      # conf_specificity = (conf_matrix[0][0] / float(conf_matrix[0][0] + conf_matrix[0][1]))
      # FPR= (1 - conf_specificity)
      specificity1 = conf_matrix[1,1]/(conf_matrix[1,0]+conf_matrix[1,1])

      Specificity[fold_N]=specificity1
      # auC= (float(1+TPR - FPR)/2)
      AUC[fold_N]=roc_auc

      fold_N = fold_N +1
      

    
    # AUCDF[d] = AUCmatrix.ravel()
    # SENDF[d] = SENmatrix.ravel()
    # SPECDF[d] = SPECmatrix.ravel()
    
    print (d, "AUC = %.2f SenStd = %.2f " % (AUC.mean(), AUC.std()))
    print (d, "Sen = %.2f SenStd = %.2f " % (Sensitifity.mean(), Sensitifity.std()))
    print (d, "Spe = %.2f SenStd = %.2f " % (Specificity.mean(), Specificity.std()))
    print('AUC' ,AUC)
    print('Sensitifity', Sensitifity)
    print('Specificity' ,Specificity)
    print (d, "AUC = %.5f SenStd = %.2f " % (AUC.mean(), AUC.std()))
    print (d, "Sen = %.5f SenStd = %.2f " % (Sensitifity.mean(), Sensitifity.std()))
    print (d, "Spe = %.5f SenStd = %.2f " % (Specificity.mean(), Specificity.std()))
    mean_tpr = np.mean(tprs, axis=0)
    mean_tpr[-1] = 1.0
    mean_auc = auc(mean_fpr, mean_tpr)
    std_auc = np.std(aucs)
    if(i% 2 == 0):
      plt.plot(mean_fpr, mean_tpr,
               label=d +' Mean ROC (AUC = %0.2f $\pm$ %0.2f)' % (mean_auc, std_auc),
               lw=2, alpha=.8, linestyle=lines[i])
    else:
      plt.plot(mean_fpr, mean_tpr,
               label=d +' Mean ROC (AUC = %0.2f $\pm$ %0.2f)' % (mean_auc, std_auc),
               lw=2, alpha=.8)

    i = i +1

    std_tpr = np.std(tprs, axis=0)
    tprs_upper = np.minimum(mean_tpr + std_tpr, 1)
    tprs_lower = np.maximum(mean_tpr - std_tpr, 0)
    plt.fill_between(mean_fpr, tprs_lower, tprs_upper, color='grey', alpha=.2)
print('******************************************')
end = time.time()
temp = end-start
print(temp)
hours = temp//3600
temp = temp - 3600*hours
minutes = temp//60
seconds = temp - 60*minutes
print('%d:%d:%d' %(hours,minutes,seconds))
plt.xlim([-0.05, 1.05])
plt.ylim([-0.05, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title("RandomizedSearchCV RS-ENSVM results  ")
plt.legend(loc="lower right")
plt.show()