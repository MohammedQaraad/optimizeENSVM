# -*- coding: utf-8 -*-
"""RSSVM without FS 9-8 .ipynb

Automatically generated by Colaboratory.
@author: Mohammed Qaraad 

Original file is located at
    https://colab.research.google.com/drive/157ymd86dZQ8rqo3O5tg7TYvqHqRLoz_Q
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
import csv
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
import random
from google.colab import drive
drive.mount('/content/drive')
from sklearn.model_selection import StratifiedKFold
from sklearn import metrics
from sklearn.linear_model import ElasticNet
from collections import Counter
import tarfile
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import StratifiedKFold
from sklearn import metrics
from sklearn.metrics import roc_curve, auc
from numpy import interp
from sklearn.model_selection import RandomizedSearchCV
from sklearn.utils.fixes import loguniform

from  warnings import simplefilter
from sklearn.exceptions import ConvergenceWarning
simplefilter("ignore", category=ConvergenceWarning)
random_s = np.random.RandomState(0)

# Hyper-Parameter for optimize SVM C and gamma 
cMin=0.01
cMax=1000
gMin=0.0001
gMax=0.1
#lower and upper Velocity
alpha=0.1
vcMax = alpha *(cMax - cMin)
vcMin= - vcMax
vgMax= alpha * (gMax - gMin)
vgMin= - vgMax
verbose=0


random_s = np.random.RandomState(0)

# def initPosition(Np,Nd,cMax, cMin,gMax,gMin):
#     random_s = np.random.RandomState(0)

#     R=np.zeros((Np,Nd))
#     for p in range (0,Np):  #10
#       #R = initPosition (R, Np, Nd, cMin, cMax, gMax, gMin)
#       R[p][0]= np.random.rand()*(cMax-cMin)+cMin  #  Penalty parameter (C)
#       R[p][1]= np.random.rand()*(gMax-gMin)+gMin #  RBF Kernel (Sigma)
    
#     return R


# def initVelocity(Np,Nd):
#     v=np.zeros((Np,Nd))
#     for p in range (0,Np):  #10
#       #R = initPosition (R, Np, Nd, cMin, cMax, gMax, gMin)
#       v[p][0]= 0
#       v[p][1]= 0
    
#     return v


def perf_measure(y_actual, y_hat):
    TP = 0
    FP = 0
    TN = 0
    FN = 0

    for i in range(len(y_hat)): 
        if y_actual[i]==y_hat[i]==1:
           TP += 1
        if y_hat[i]==1 and y_actual[i]!=y_hat[i]:
           FP += 1
        if y_actual[i]==y_hat[i]==0:
           TN += 1
        if y_hat[i]==0 and y_actual[i]!=y_hat[i]:
           FN += 1

    return(TP, FP, TN, FN)

"""# **RandomizedsearchCV without FS optimize RBF kernel**"""

# ,'choewdary.tar.gz','golub.tar.gz','gordon.tar.gz'+
data_set_name=['chin.tar.gz','alon.tar.gz','chowdary.tar.gz','golub.tar.gz',
               'singh.tar.gz']
# data_set_name=['gordon.tar.gz']
plt.figure(figsize=(8,8))
plt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r',
         label='Luck', alpha=.8)    
import time
start = time.time()

for i in data_set_name:
  d= i.split('.')[0]
  print(d)
  file='/content/drive/My Drive/Colab Notebooks/data/'+i
  datasetname=d

  min_max_scaler = MinMaxScaler()
  with tarfile.open(file, "r:*") as tar:
    csv_path = tar.getnames()
    if(d == 'singh' or d == 'west'):
      labels = pd.read_csv(tar.extractfile(csv_path[1]), header=None)
      feature = pd.read_csv(tar.extractfile(csv_path[0]), header=None)

    else:
      labels = pd.read_csv(tar.extractfile(csv_path[0]), header=None)
      feature = pd.read_csv(tar.extractfile(csv_path[1]), header=None)
  headers = list(feature.columns)
  features = np.asarray(feature.values)
  features = min_max_scaler.fit_transform(feature)
  labels = np.transpose(np.asarray(labels.values.ravel() - 1, dtype=int))
  print(features.shape, labels.shape)

  counter = Counter(labels)
  print(counter)
  Max_iterations=50
  LB=1e-4*np.ones((1,2))
  UB=1e-3*np.ones((1,2))

  Xrange=UB[0,0]-LB[0,0]
  Yrange=UB[0,1]-LB[0,1]
  Dim=UB.shape[1]


  NoRun=1
  random_s = np.random.RandomState(0)

  cv = StratifiedKFold(n_splits=10,shuffle=True, random_state=random_s)
  fold_N=0
  max_fold=10
  Nd=2  
  Np = 20
  maxIter = 50;
  target_error=0.0 
  
  ConvergenceCurve=np.zeros((maxIter))
  Gbest = np.zeros((maxIter))
  best = np.zeros((maxIter,Nd))
  ResultsValidation = np.zeros((NoRun,max_fold))
  ResultsTestingAcc = np.zeros((NoRun,max_fold))
  fold_best_postion =np.zeros((max_fold,2))
  #evaluated matrix 
  Accuracy=np.zeros((max_fold))
  Precision=np.zeros((max_fold))
  Recall=np.zeros((max_fold))
  TP=[]
  FP=[]
  TN=[]
  FN=[]

  Specificity = np.zeros((max_fold))
  Sensitifity = np.zeros((max_fold))
  AUC = np.zeros((max_fold))
  X= features
  y=labels
  tprs = []
  aucs = []
  mean_fpr = np.linspace(0, 1, 100)
  # AUCmatrix1=np.zeros((Max_iterations,max_fold))
  # SENmatrix1=np.zeros((Max_iterations,max_fold))
  # SPECmatrix1=np.zeros((Max_iterations,max_fold))
  
  for r in range(0,NoRun):
    fold_N=0
    i=0
    for train_index, test_index in cv.split(features,labels):
      w=1;                # Inertia Weight
      wdamp=0.98;         # Inertia Weight Damping Ratio
      correction_factor1 = 2;
      correction_factor2 = 2;
      kernel='rbf';
      verbose=0;
      swarm_size=20
      Swarm=np.zeros((swarm_size,2))
      PreviouBest=float('inf')* np.ones((Max_iterations,3))
      # Initial best value so far
      # GlobalBestSolution=float('inf')
      # BestSolns=float('inf')* np.ones((swarm_size,2))
      gBestPos   = [0] * 2
      gBestValue = float("inf") 
    
      # Initialize the population/solutions
      # R = initPosition(Np,Nd,cMax, cMin,gMax,gMin)
      # V = initVelocity(Np,Nd)
      #initialization Fitness function
      Fval=np.zeros((Max_iterations))
      #Data Partition 
      X_train, X_test =  X[train_index], X[test_index]
      y_train, y_test = y[train_index], y[test_index]
      x_train, x_validation, y_train, y_validation = train_test_split(X_train,y_train,test_size = 0.11)

      

      for iter in range(0, maxIter):
        # Swarm= initPosition(Np,Nd,cMax, cMin,gMax,gMin)
        for i in range(swarm_size):
            
          #R = initPosition (R, Np, Nd, cMin, cMax, gMax, gMin)
          Swarm[i,0]= np.random.rand()*(cMax-cMin)+cMin  #  Penalty parameter (C)
          Swarm[i,1]= np.random.rand()*(gMax-gMin)+gMin #  RBF Kernel (Sigma)
          
          Swarm[i,0] = max(Swarm[i,0],cMin)
          Swarm[i,0] = min(Swarm[i,0],cMax)
          Swarm[i,1] = max(Swarm[i,1],gMin)
          Swarm[i,1] = min(Swarm[i,1],gMax)

          
        #   # #Update Position Bounds
        #   # R[p][0]= max(R[p][0],cMin)
        #   # R[p][0]= min(R[p][0],cMax)

        #   # R[p][1]= max(R[p][1], gMin)
        #   # R[p][1]= min(R[p][1], gMax)


        
        
     
        parameter_candidates={'C':list(Swarm[:,0]) , 'gamma': list(Swarm[:,1]), 'kernel': ['rbf']}
        # parameter_candidates=[{'C':loguniform(0.1, 1000) , 'gamma': loguniform(0.01, 0.0001), 'kernel': ['rbf']}]

        clf = RandomizedSearchCV(SVC(), parameter_candidates, n_iter=1,  n_jobs=-1, random_state=random_s)
        clf.fit(x_train, y_train)
        # clf.fit(Xtrain, ytrain) 

        svclassifier = SVC(kernel='rbf', gamma = clf.best_estimator_.gamma, C = clf.best_estimator_.C ,verbose=0, random_state=random_s)
  
        svclassifier.fit(x_train, y_train)
        ypred = svclassifier.predict(x_validation)
        ValidationError=sum(ypred==y_validation)*100/y_validation.shape[0]

        

        Fval[iter]= 100 - ValidationError

            
        if Fval[iter]<PreviouBest[iter,2]:
          PreviouBest[iter,0]=clf.best_estimator_.C # Update the position of the first dimension
          PreviouBest[iter,1]=clf.best_estimator_.gamma # Update the position of the second dimension
          PreviouBest[iter,2]=Fval[iter]          # Update best value

        #calculate global solu and position for current Run 
        if Fval[iter] < gBestValue:
          gBestValue = Fval[iter]
          gBestPos[0]   = clf.best_estimator_.C
          gBestPos[1]   = clf.best_estimator_.gamma



  
      print('fold_N = ', fold_N , ' Best value of C= ', gBestPos[0],'  Best value of Sigma=',gBestPos[1],  'fmin= ', gBestValue) 
      # ResultsValidation[r][fold_N]=gBestValue
      # fold_best_postion[fold_N]= gBestPos

      svclassifier = SVC(kernel='rbf', gamma = gBestPos[1], C = gBestPos[0] ,verbose=0, random_state=random_s)
      svclassifier.fit(x_train, y_train)
      ypred = svclassifier.predict(X_test)
      TestingError=sum(ypred== y_test)*100/y_test.shape[0]

      print('TestingError = ', TestingError)
      fpr, tpr, t = roc_curve(y_test, ypred)
      #print('fpr ',fpr) 
      #print('tpr',tpr)
      tprs.append(interp(mean_fpr, fpr, tpr))
      roc_auc = auc(fpr, tpr)
      aucs.append(roc_auc)
      #plt.plot(fpr, tpr, lw=2, alpha=0.3, label='ROC fold %d (AUC = %0.2f)' % (i, roc_auc))
      i= i+1
      conf_matrix = confusion_matrix(y_test, ypred)
      
      sensitivity1 = conf_matrix[0,0]/(conf_matrix[0,0]+conf_matrix[0,1])

      Sensitifity[fold_N]=sensitivity1
      
      specificity1 = conf_matrix[1,1]/(conf_matrix[1,0]+conf_matrix[1,1])

      Specificity[fold_N]=specificity1
      # auC= (float(1+TPR - FPR)/2)
      AUC[fold_N]=roc_auc
    
      #calculate Error ratio 
      TestingError=sum(ypred==y_test)*100/y_test.shape[0]
      
      fold_N = fold_N +1
  
   
    
    print (d, "AUC = %.2f SenStd = %.2f " % (AUC.mean(), AUC.std()))
    print (d, "Sen = %.2f SenStd = %.2f " % (Sensitifity.mean(), Sensitifity.std()))
    print (d, "Spe = %.2f SenStd = %.2f " % (Specificity.mean(), Specificity.std()))
    print('AUC' ,AUC)
    print('Sensitifity', Sensitifity)
    print('Specificity' ,Specificity)
    print (d, "AUC = %.5f SenStd = %.2f " % (AUC.mean(), AUC.std()))
    print (d, "Sen = %.5f SenStd = %.2f " % (Sensitifity.mean(), Sensitifity.std()))
    print (d, "Spe = %.5f SenStd = %.2f " % (Specificity.mean(), Specificity.std()))
    mean_tpr = np.mean(tprs, axis=0)
    mean_tpr[-1] = 1.0
    mean_auc = auc(mean_fpr, mean_tpr)
    std_auc = np.std(aucs)
    plt.plot(mean_fpr, mean_tpr,
             label=d +' Mean ROC (AUC = %0.2f $\pm$ %0.2f)' % (mean_auc, std_auc),
             lw=2, alpha=.8)



    std_tpr = np.std(tprs, axis=0)
    tprs_upper = np.minimum(mean_tpr + std_tpr, 1)
    tprs_lower = np.maximum(mean_tpr - std_tpr, 0)
    plt.fill_between(mean_fpr, tprs_lower, tprs_upper, color='grey', alpha=.2)
print('******************************************')
end = time.time()
temp = end-start
print(temp)
hours = temp//3600
temp = temp - 3600*hours
minutes = temp//60
seconds = temp - 60*minutes
print('%d:%d:%d' %(hours,minutes,seconds))
plt.xlim([-0.05, 1.05])
plt.ylim([-0.05, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Optimize SVM (rbf)kernel C and gamma Using RandomizedSearchCV results')
plt.legend(loc="lower right")
plt.show()