# -*- coding: utf-8 -*-
"""SSDENSVMD1.ipynb

Automatically generated by Colaboratory.
@author: Mohammed Qaraad 

Original file is located at
    https://colab.research.google.com/drive/1bHIc_BvYdPnulIizbOI1DyEDiceVKSX5
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
import csv
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
import random
from google.colab import drive
drive.mount('/content/drive')
from sklearn import metrics
from sklearn.linear_model import ElasticNet
from collections import Counter
import tarfile
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import StratifiedKFold
from sklearn import metrics
from sklearn.metrics import roc_curve, auc
from numpy import interp

from  warnings import simplefilter
from sklearn.exceptions import ConvergenceWarning
simplefilter("ignore", category=ConvergenceWarning)

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import StratifiedKFold
from sklearn import metrics
from sklearn.metrics import roc_curve, auc
from numpy import interp

from  warnings import simplefilter
from sklearn.exceptions import ConvergenceWarning
simplefilter("ignore", category=ConvergenceWarning)
import time

file='/content/drive/My Drive/Colab Notebooks/data/chowdary.tar.gz'
datasetname='west'

min_max_scaler = MinMaxScaler()
with tarfile.open(file, "r:*") as tar:
  csv_path = tar.getnames()
  labels = pd.read_csv(tar.extractfile(csv_path[0]), header=None)
  feature = pd.read_csv(tar.extractfile(csv_path[1]), header=None)
headers = list(feature.columns)
features = np.asarray(feature.values)
features = min_max_scaler.fit_transform(feature)
labels = np.transpose(np.asarray(labels.values.ravel() - 1, dtype=int))
print(features.shape, labels.shape)

counter = Counter(labels)
print(counter)





Max_iterations=50  # Maximum Number of Iterations
correction_factor = 2.0 # Correction factor
inertia = 1.0 # Ineritia Coeffecient
swarm_size = 20 # Number of particles
LB=1e-4*np.ones((1,2))
UB=1e-3*np.ones((1,2))

Xrange=UB[0,0]-LB[0,0]
Yrange=UB[0,1]-LB[0,1]
Dim=UB.shape[1]

fold_N=0  # Number of runs
random_s = np.random.RandomState(0)
cv = StratifiedKFold(n_splits=10,shuffle=True, random_state= random_s)

#evaluated matrix
max_fold=10
Accuracy=np.zeros((max_fold))
Precision=np.zeros((max_fold))
Recall=np.zeros((max_fold))
ResultsTestingAcc = np.zeros((max_fold))
TP=[]
FP=[]
TN=[]
FN=[]

Specificity = np.zeros((max_fold))
Sensitifity = np.zeros((max_fold))
AUC = np.zeros((max_fold))

tprs = []
aucs = []
mean_fpr = np.linspace(0, 1, 100)
BestAlpha=np.zeros((max_fold))

# Initial Positions
ConvergenceCurve=np.zeros((Max_iterations,max_fold))
start = time.time()

for train_index, test_index in cv.split(features,labels):
    Swarm=np.zeros((swarm_size,2))
    PreviouBest=float('inf')* np.ones((swarm_size,3))
    # Initial best value so far
    GlobalBestSolution=float('inf')
    BestSolns=float('inf')* np.ones((swarm_size,2))
    gBestPos   = [0] * Dim
    gBestValue = float("inf") 
    #store Global Best Position and Solution For Current Run 
    
	    
    # Initial velocity
    Velocity=np.zeros((swarm_size,2))
    Fval=np.zeros((swarm_size))
    for i in range(swarm_size):
        Swarm[i,0]= np.random.random()*Xrange+LB[0,0]
        Swarm[i,1]= np.random.random()*Yrange+LB[0,1]
        #print(Swarm)
        

        X_train, X_test =  features[train_index], features[test_index]
        y_train, y_test = labels[train_index], labels[test_index]
        
        #claculate Fitness 
        elasticNet=ElasticNet(alpha=Swarm[i][0], random_state=random_s)
        elasticNet.fit(X_train,y_train)
        data_el= elasticNet.coef_
        gains = np.asarray(data_el)
        indexes = np.where(gains != 0)[0]
        #print(indexes.shape)
        if(indexes.shape[0]== 0):
          continue

        x_trainx = X_train[:, indexes]
        x_testx = X_test[:, indexes]
        #x_train, x_validation, y_train, y_validation = train_test_split(x_train,y_train,test_size = 0.11)

        svclassifier = SVC(kernel='rbf',verbose=0, random_state=random_s)  
        svclassifier.fit(x_trainx, y_train)
        ypred = svclassifier.predict(x_testx)
        # elasticNet.fit(x_train, y_train)
        # ypred = elasticNet.predict(x_test)
        # ypred = np.round(ypred,decimals=0)
        # ypred= ypred.astype(int)
        ValidationError=sum(ypred==y_test)*100/y_test.shape[0]
        Fval[i]= 100 - ValidationError
        
        if Fval[i]<PreviouBest[i,2]:
          PreviouBest[i,0]=Swarm[i,0] # Update the position of the first dimension
          PreviouBest[i,1]=Swarm[i,1] # Update the position of the second dimension
          PreviouBest[i,2]=Fval[i]          # Update best value
        #calculate global solu and position for current Run 
        if Fval[i] < gBestValue:
          gBestValue = Fval[i]
          gBestPos   = Swarm[i]  



    for iter in range(Max_iterations):
        # Calculating fitness value for all particles    
        for i in range(swarm_size):
            Swarm[i,0]=Swarm[i,0]+Velocity[i,0]
            Swarm[i,1]=Swarm[i,1]+Velocity[i,1]
            
            # Update Position Bounds
            Swarm[i,0] = max(Swarm[i,0],LB[0,0])
            Swarm[i,0] = min(Swarm[i,0],UB[0,0])
            Swarm[i,1] = max(Swarm[i,1],LB[0,1])
            Swarm[i,1] = min(Swarm[i,1],UB[0,1])
            

            

            Xtrain, Xtest =  features[train_index], features[test_index]
            ytrain, ytest = labels[train_index], labels[test_index]

            #claculate Fitness 
            elasticNet=ElasticNet(alpha=Swarm[i][0],random_state=random_s)
            elasticNet.fit(X_train,y_train)
            data_el= elasticNet.coef_
            gains = np.asarray(data_el)
            indexes = np.where(gains != 0)[0]
            #print(indexes.shape)
            if(indexes.shape[0]== 0): 
              continue

            xtrain = X_train[:, indexes]
            xtest = X_test[:, indexes]
            #xtrain, xvalidation, ytrain, yvalidation = train_test_split(xtrain,y_train,test_size = 0.11)



            svclassifier = SVC(kernel='rbf',verbose=0, random_state=random_s)  
            svclassifier.fit(xtrain, ytrain)
            ypred = svclassifier.predict(xtest)
            # elasticNet.fit(x_train, y_train)
            # ypred = elasticNet.predict(x_test)
            # ypred = np.round(ypred,decimals=0)
            # ypred= ypred.astype(int)
            ValidationError=sum(ypred==ytest)*100/xtest.shape[0]
            Fval[i]= 100 - ValidationError

            
            if Fval[i]<PreviouBest[i,2]:
                PreviouBest[i,0]=Swarm[i,0] # Update the position of the first dimension
                PreviouBest[i,1]=Swarm[i,1] # Update the position of the second dimension
                PreviouBest[i,2]=Fval[i]          # Update best value

            #calculate global solu and position for current Run 
            if Fval[i] < gBestValue:
              gBestValue = Fval[i]
              gBestPos   = Swarm[i]  
                
        a=2.0-iter*(float((2)/float(Max_iterations))) # a decreases linearly fron 2 to 0
        
        # Search for the global best solution
        (Gbest,idxGbest) = min((v,i) for i,v in enumerate(PreviouBest[:,2]))
        #    or
        #    Gbest= PreviouBest[:,2].min()
        #    idxGbest=np.argmin(PreviouBest[:,2])
        
        SortedElements=np.sort(PreviouBest[:,2])
        idxSortedElements=np.argsort(PreviouBest[:,2])
        # Find the mean of the best three solutions
        M=np.zeros((Dim))
        for i in range(Dim):
            M[i]=np.mean(Swarm[idxSortedElements[0:3],i])
    
        r1=np.random.random()  #r1 is a random number in [0,1]
        r2=np.random.random()  # r2 is a random number in [0,1]
        
        A1=2*a*r1-a     
        C1=2*r2         
        
        # Updating velocity vectors        
        for i in range(swarm_size):

            if np.random.random()<0.5:
                for j in range(Dim):
                    Velocity[i,j]=(a)*np.sin(np.random.random())*(PreviouBest[i,j] - Swarm[i,j])+(2.0-a)*np.sin(np.random.random())*(M[j]- Swarm[i,j])   # velocity component
            else:
                for j in range(Dim):
                    Velocity[i,j]=(a)*np.cos(np.random.random())*(PreviouBest[i,j] - Swarm[i,j])+(2.0-a)*np.cos(np.random.random())*(M[j]- Swarm[i,j])   # velocity component
        
        ConvergenceCurve[iter,fold_N]=SortedElements[0]

    print('fold_N = ', fold_N , ' Best value of Alpha = ', gBestPos[0],   'with fitness value = ', gBestValue)
    BestAlpha[fold_N]= gBestPos[0]
    #ResultsValidation[r][fold_N]=gBestValue
    #fold_best_postion[fold_N]= gBestPos

    F_train, F_test =  features[train_index], features[test_index]
    z_train, z_test = labels[train_index], labels[test_index]

    #claculate Fitness 
    elasticNet=ElasticNet(alpha=gBestPos[0],random_state=random_s)
    elasticNet.fit(F_train,z_train)
    data_el= elasticNet.coef_
    gains = np.asarray(data_el)
    indexes = np.where(gains != 0)[0]
    #print(indexes.shape)
    if(indexes.shape[0]== 0):
      continue

    f_train = F_train[:, indexes]
    f_test = F_test[:, indexes]
    # x_train, x_validation, y_train, y_validation = train_test_split(x_train,y_train,test_size = 0.11)
    # elasticNet=ElasticNet(alpha=gBestPos[0])
    # gains = np.asarray(data_el)
    # indexes = np.where(gains != 0)[0]
    # #print(indexes.shape)
    # if(indexes.shape[0]== 0):
    #   continue

    # X_train, X_test =  features[train_index], features[test_index]
    # y_train, y_test = labels[train_index], labels[test_index]
    # x_train = X_train[:, indexes]
    # x_test = X_test[:, indexes]
    # x_train, x_validation, y_train, y_validation = train_test_split(x_train,y_train,test_size = 0.11)
    # elasticNet.fit(x_train,y_train)

    # ypred = elasticNet.predict(x_test)
    svclassifier = SVC(kernel='rbf', verbose=0, random_state=random_s)
    svclassifier.fit(f_train, z_train)
    ypred = svclassifier.predict(f_test)
    #y_true = y_test
    TestingError=sum(ypred==z_test)*100/z_test.shape[0]
    print('TestingError = ', TestingError)
    ResultsTestingAcc[fold_N]=100-TestingError;
    #SV[r]= svclassifier.n_support_
    #print('fold_N testing error ', 100-TestingError)
    fpr, tpr, t = roc_curve(z_test, ypred)
    #print('fpr ',fpr) 
    #print('tpr',tpr)
    tprs.append(interp(mean_fpr, fpr, tpr))
    roc_auc = auc(fpr, tpr)
    aucs.append(roc_auc)
    i= i+1
    conf_matrix = confusion_matrix(z_test, ypred)
    # TP.append(conf_matrix[1][1])
    # TN.append(conf_matrix[0][0])
    # FP.append(conf_matrix[0][1])
    # FN.append(conf_matrix[1][0])
    # conf_sensitivity = (conf_matrix[1][1] / float(conf_matrix[1][1] + conf_matrix[1][0]))
    # TPR=conf_sensitivity
    sensitivity1 = conf_matrix[0,0]/(conf_matrix[0,0]+conf_matrix[0,1])

    Sensitifity[fold_N]=sensitivity1
    # conf_specificity = (conf_matrix[0][0] / float(conf_matrix[0][0] + conf_matrix[0][1]))
    # FPR= (1 - conf_specificity)
    specificity1 = conf_matrix[1,1]/(conf_matrix[1,0]+conf_matrix[1,1])

    Specificity[fold_N]=specificity1
    # auC= (float(1+TPR - FPR)/2)
    AUC[fold_N]=roc_auc
    fold_N = fold_N +1
  
print('******************************************')
end = time.time()
temp = end-start
print(temp)
hours = temp//3600
temp = temp - 3600*hours
minutes = temp//60
seconds = temp - 60*minutes
print('%d:%d:%d' %(hours,minutes,seconds))
print ("AUC = %.2f SenStd = %.2f " % (AUC.mean(), AUC.std()))
print ("Sen = %.2f SenStd = %.2f " % (Sensitifity.mean(), Sensitifity.std()))
print ("Spe = %.2f SenStd = %.2f " % (Specificity.mean(), Specificity.std()))
print('AUC' ,AUC)
print('Sensitifity', Sensitifity)
print('Specificity' ,Specificity) 
print ("AUC = %.5f SenStd = %.2f " % (AUC.mean(), AUC.std()))
print ("Sen = %.5f SenStd = %.2f " % (Sensitifity.mean(), Sensitifity.std()))
print ("Spe = %.5f SenStd = %.2f " % (Specificity.mean(), Specificity.std()))
plt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r',
         label='Luck', alpha=.8)
mean_tpr = np.mean(tprs, axis=0)
mean_tpr[-1] = 1.0
mean_auc = auc(mean_fpr, mean_tpr)
std_auc = np.std(aucs)
plt.plot(mean_fpr, mean_tpr, color='b',
         label=r'Mean ROC (AUC = %0.2f $\pm$ %0.2f)' % (mean_auc, std_auc),
         lw=2, alpha=.8)

plt.plot(mean_fpr, mean_tpr, color='k',
         label=r'Mean Sen (Sen = %0.2f $\pm$ %0.2f)' % (Sensitifity.mean(), Sensitifity.std()),
         lw=2, alpha=.8)

plt.plot(mean_fpr, mean_tpr, color='m',
         label=r'Mean Spe (Spe = %0.2f $\pm$ %0.2f)' % (Specificity.mean(), Specificity.std()),
         lw=2, alpha=.8)

std_tpr = np.std(tprs, axis=0)
tprs_upper = np.minimum(mean_tpr + std_tpr, 1)
tprs_lower = np.maximum(mean_tpr - std_tpr, 0)
plt.fill_between(mean_fpr, tprs_lower, tprs_upper, color='grey', alpha=.2,
                 label=r'$\pm$ 1 std. dev.')

plt.xlim([-0.05, 1.05])
plt.ylim([-0.05, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title(datasetname)
plt.legend(loc="lower right")
plt.show()

# for i in range(10):
#   print(BestAlpha[i])

 

# print('AUC ', AUC )
# print('Sensitifity ', Sensitifity)
# print('Specificity', Specificity)