# -*- coding: utf-8 -*-
"""SSDSVM without FS LAST.ipynb

Automatically generated by Colaboratory.
@author: Mohammed Qaraad 

Original file is located at
    https://colab.research.google.com/drive/1nQotKGtX7sVZEHiDipXCuo7s85EA-aoJ
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
import csv
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix
import random
from google.colab import drive
drive.mount('/content/drive')
from sklearn import metrics
from sklearn.linear_model import ElasticNet
from collections import Counter
import tarfile
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import StratifiedKFold
from sklearn import metrics
from sklearn.metrics import roc_curve, auc
from numpy import interp

from  warnings import simplefilter
from sklearn.exceptions import ConvergenceWarning
simplefilter("ignore", category=ConvergenceWarning)

"""# **SSD with FS**"""

# Hyper-Parameter alpha
# cMin=1e-4
# cMax=1e-3
# hyperparmeter for c and gamma SVM RBF
cMin=0.01
cMax=1000
gMin=0.0001
gMax=0.1
#lower and upper Velocity
alpha=0.1
vcMax = alpha *(cMax - cMin)
vcMin= - vcMax
vgMax= alpha * (gMax - gMin)
vgMin= - vgMax
verbose=0
random_s = np.random.RandomState(0)


def initPosition(Np,Nd,cMax, cMin,gMax,gMin):
    R=np.zeros((Np,Nd))
    for p in range (0,Np):  #10
      #R = initPosition (R, Np, Nd, cMin, cMax, gMax, gMin)
      R[p][0]= np.random.rand()*(cMax-cMin)+cMin  #  Penalty parameter (C)
      R[p][1]= np.random.rand()*(gMax-gMin)+gMin #  RBF Kernel (Sigma)
    
    return R


def initVelocity(Np,Nd):
    v=np.zeros((Np,Nd))
    for p in range (0,Np):  #10
      #R = initPosition (R, Np, Nd, cMin, cMax, gMax, gMin)
      v[p][0]= 0
      v[p][1]= 0
    
    return v


def perf_measure(y_actual, y_hat):
    TP = 0
    FP = 0
    TN = 0
    FN = 0

    for i in range(len(y_hat)): 
        if y_actual[i]==y_hat[i]==1:
           TP += 1
        if y_hat[i]==1 and y_actual[i]!=y_hat[i]:
           FP += 1
        if y_actual[i]==y_hat[i]==0:
           TN += 1
        if y_hat[i]==0 and y_actual[i]!=y_hat[i]:
           FN += 1

    return(TP, FP, TN, FN)

"""# **SSD optimize C and Gamma without FS**"""

# 'golub.tar.gz','gordon.tar.gz','singh.tar.gz','west.tar.gz'
# 'chin.tar.gz','alon.tar.gz','chowdary.tar.gz'
# ,'singh.tar.gz','west.tar.gz'
# 'gordon.tar.gz','golub.tar.gz'
# 'west.tar.gz','chin.tar.gz','alon.tar.gz','chowdary.tar.gz'
data_set_name=['west.tar.gz','chin.tar.gz']
plt.figure(figsize=(5,6))
plt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r',
         label='Luck', alpha=.8)    
import time
start = time.time()
for i in data_set_name:
  d= i.split('.')[0]
  print(d)
  file='/content/drive/My Drive/Colab Notebooks/data/'+i
  datasetname=d

  min_max_scaler = MinMaxScaler()
  with tarfile.open(file, "r:*") as tar:
    csv_path = tar.getnames()
    if(d == 'singh' or d == 'west'):
      labels = pd.read_csv(tar.extractfile(csv_path[1]), header=None)
      feature = pd.read_csv(tar.extractfile(csv_path[0]), header=None)

    else:
      labels = pd.read_csv(tar.extractfile(csv_path[0]), header=None)
      feature = pd.read_csv(tar.extractfile(csv_path[1]), header=None)
  headers = list(feature.columns)
  features = np.asarray(feature.values)
  features = min_max_scaler.fit_transform(feature)
  labels = np.transpose(np.asarray(labels.values.ravel() - 1, dtype=int))
  print(features.shape, labels.shape)

  counter = Counter(labels)
  print(counter)
  
  Max_iterations=50  # Maximum Number of Iterations
  correction_factor = 2.0 # Correction factor
  inertia = 1.0 # Ineritia Coeffecient
  swarm_size = 20 # Number of particles
  LB=1e-4*np.ones((1,2))
  UB=1e-3*np.ones((1,2))

  Xrange=UB[0,0]-LB[0,0]
  Yrange=UB[0,1]-LB[0,1]
  Dim=UB.shape[1]
  cMin=0.01
  cMax=1000
  gMin=0.0001
  gMax=0.1
  fold_N=0  # Number of runs
  random_s = np.random.RandomState(0)
  cv = StratifiedKFold(n_splits=10,shuffle=True,random_state=random_s)
  Nd=2  
  Np = 20
  #evaluated matrix
  max_fold=10
  Accuracy=np.zeros((max_fold))
  Precision=np.zeros((max_fold))
  Recall=np.zeros((max_fold))
  ResultsTestingAcc = np.zeros((max_fold))
  TP=[]
  FP=[]
  TN=[]
  FN=[]

  Specificity = np.zeros((max_fold))
  Sensitifity = np.zeros((max_fold))
  AUC = np.zeros((max_fold))

  tprs = []
  aucs = []
  mean_fpr = np.linspace(0, 1, 100)
  BestAlpha=np.zeros((max_fold))

  NoRun=1
  
  for r in range(0,NoRun):
    fold_N=0
    i=0
    lines=["-",":","--","-."]
    for train_index, test_index in cv.split(features,labels):
      Swarm=np.zeros((swarm_size,2))
      PreviouBest=float('inf')* np.ones((swarm_size,3))
      # Initial best value so far
      # GlobalBestSolution=float('inf')
      # BestSolns=float('inf')* np.ones((swarm_size,2))
      gBestPos   = [0] * 2
      gBestValue = float("inf") 
      #store Global Best Position and Solution For Current Run 
    
	    
      # Initial velocity
      Velocity=np.zeros((swarm_size,2))
      Fval=np.zeros((swarm_size))

      Swarm=initPosition(Np,Nd,cMax, cMin,gMax,gMin)
      X_train, X_test =  features[train_index], features[test_index]
      y_train, y_test = labels[train_index], labels[test_index]
      x_train, x_validation, y_train, y_validation = train_test_split(X_train,y_train,test_size = 0.11)
      #evaluate Fintness Function 
      for p in range (0,swarm_size):
        # Swarm[p][0]= np.random.rand()*(cMax-cMin)+cMin  #  Penalty parameter (C)
        # Swarm[p][1]= np.random.rand()*(gMax-gMin)+gMin #
        svclassifier = SVC(kernel='rbf', gamma =Swarm[p][1], C = Swarm[p][0] ,verbose=0, random_state=random_s)  
        svclassifier.fit(x_train, y_train)
        ypred = svclassifier.predict(x_validation)
        ValidationError=sum(ypred==y_validation)*100/y_validation.shape[0]
        Fval[p]= 100 - ValidationError
      
        if Fval[p]<PreviouBest[p,2]:
          PreviouBest[p,0]=Swarm[p,0] # Update the position of the first dimension
          PreviouBest[p,1]=Swarm[p,1] # Update the position of the second dimension
          PreviouBest[p,2]=Fval[p]          # Update best value

        if Fval[p] < gBestValue:
          gBestValue = Fval[p]
          gBestPos   = Swarm[p]  


      

      for iter in range(Max_iterations):
		    # Calculating fitness value for all particles    
        for i in range(swarm_size):
            Swarm[i,0]=Swarm[i,0]+Velocity[i,0]
            Swarm[i,1]=Swarm[i,1]+Velocity[i,1]
            
            # Update Position Bounds
            Swarm[i,0] = max(Swarm[i,0],cMin)
            Swarm[i,0] = min(Swarm[i,0],cMax)
            Swarm[i,1] = max(Swarm[i,1],gMin)
            Swarm[i,1] = min(Swarm[i,1],gMax)

            #Update Velocity Bounds
            Velocity[i][0]= max(Velocity[i][0],vcMin )
            Velocity[i][0]= min(Velocity[i][0],vcMax )

            Velocity[i][1]= max(Velocity[i][0],vgMin)
            Velocity[i][1]= min(Velocity[i][0],vgMax)

            #Update Position
            Swarm[i][0]= Swarm[i][0] + Velocity[i][0]
            Swarm[i][1]= Swarm[i][1] + Velocity[i][1]

            #Update Position Bounds
            Swarm[i][0]= max(Swarm[i][0],cMin)
            Swarm[i][0]= min(Swarm[i][0],cMax)

            Swarm[i][1]= max(Swarm[i][1], gMin)
            Swarm[i][1]= min(Swarm[i][1], gMax)

            
          

            


            svclassifier = SVC(kernel='rbf', gamma =Swarm[i][1], C = Swarm[i][0] ,verbose=0, random_state=random_s)  
            svclassifier.fit(x_train, y_train)
            ypred = svclassifier.predict(x_validation)
            ValidationError=sum(ypred==y_validation)*100/y_validation.shape[0]
            Fval[i]= 100 - ValidationError
            
            
            if Fval[i]<PreviouBest[i,2]:
                PreviouBest[i,0]=Swarm[i,0] # Update the position of the first dimension
                PreviouBest[i,1]=Swarm[i,1] # Update the position of the second dimension
                PreviouBest[i,2]=Fval[i]          # Update best value

            #calculate global solu and position for current Run 
            if Fval[i] < gBestValue:
              gBestValue = Fval[i]
              gBestPos   = Swarm[i]  
        a=2.0-iter*(float((2)/float(Max_iterations))) # a decreases linearly fron 2 to 0
        
        # Search for the global best solution
        (Gbest,idxGbest) = min((v,i) for i,v in enumerate(PreviouBest[:,2]))
        #    or
        #    Gbest= PreviouBest[:,2].min()
        #    idxGbest=np.argmin(PreviouBest[:,2])
        
        SortedElements=np.sort(PreviouBest[:,2])
        idxSortedElements=np.argsort(PreviouBest[:,2])
        # Find the mean of the best three solutions
        M=np.zeros((Dim))
        for i in range(Dim):
            M[i]=np.mean(Swarm[idxSortedElements[0:3],i])
    
        r1=np.random.random()  #r1 is a random number in [0,1]
        r2=np.random.random()  # r2 is a random number in [0,1]
        
        A1=2*a*r1-a     
        C1=2*r2         
        
        # Updating velocity vectors        
        for i in range(swarm_size):

            if np.random.random()<0.5:
                for j in range(Dim):
                    Velocity[i,j]=(a)*np.sin(np.random.random())*(PreviouBest[i,j] - Swarm[i,j])+(2.0-a)*np.sin(np.random.random())*(M[j]- Swarm[i,j])   # velocity component
            else:
                for j in range(Dim):
                    Velocity[i,j]=(a)*np.cos(np.random.random())*(PreviouBest[i,j] - Swarm[i,j])+(2.0-a)*np.cos(np.random.random())*(M[j]- Swarm[i,j])   # velocity component
        
        # ConvergenceCurve[iter,fold_N]=SortedElements[0]
		
      print('fold_N = ', fold_N , ' Best value of C= ', gBestPos[0],'  Best value of Sigma=',gBestPos[1],  'fmin= ', gBestValue) 
      

    
      svclassifier = SVC(kernel='rbf', gamma = gBestPos[1], C = gBestPos[0] ,verbose=0,random_state=random_s)  
      svclassifier.fit(x_train, y_train)
      ypred = svclassifier.predict(X_test)
      #y_true = y_test
      TestingError=sum(ypred==y_test)*100/y_test.shape[0]
      print('TestingError = ', TestingError)
      ResultsTestingAcc[fold_N]=100-TestingError;
      #SV[r]= svclassifier.n_support_
      #print('fold_N testing error ', 100-TestingError)
      fpr, tpr, t = roc_curve(y_test, ypred)
      #print('fpr ',fpr) 
      #print('tpr',tpr)
      tprs.append(interp(mean_fpr, fpr, tpr))
      roc_auc = auc(fpr, tpr)
      aucs.append(roc_auc)
      # i= i+1
      conf_matrix = confusion_matrix(y_test, ypred)
      # TP.append(conf_matrix[1][1])
      # TN.append(conf_matrix[0][0])
      # FP.append(conf_matrix[0][1])
      # FN.append(conf_matrix[1][0])
      # conf_sensitivity = (conf_matrix[1][1] / float(conf_matrix[1][1] + conf_matrix[1][0]))
      # TPR=conf_sensitivity
      sensitivity1 = conf_matrix[0,0]/(conf_matrix[0,0]+conf_matrix[0,1])

      Sensitifity[fold_N]=sensitivity1
      # conf_specificity = (conf_matrix[0][0] / float(conf_matrix[0][0] + conf_matrix[0][1]))
      # FPR= (1 - conf_specificity)
      specificity1 = conf_matrix[1,1]/(conf_matrix[1,0]+conf_matrix[1,1])

      Specificity[fold_N]=specificity1
      # auC= (float(1+TPR - FPR)/2)
      AUC[fold_N]=roc_auc
      fold_N = fold_N +1
      

  
      
  
    print (d, "AUC = %.2f SenStd = %.2f " % (AUC.mean(), AUC.std()))
    print (d, "Sen = %.2f SenStd = %.2f " % (Sensitifity.mean(), Sensitifity.std()))
    print (d, "Spe = %.2f SenStd = %.2f " % (Specificity.mean(), Specificity.std()))
    print('AUC' ,AUC)
    print('Sensitifity', Sensitifity)
    print('Specificity' ,Specificity)
    print (d, "AUC = %.5f SenStd = %.2f " % (AUC.mean(), AUC.std()))
    print (d, "Sen = %.5f SenStd = %.2f " % (Sensitifity.mean(), Sensitifity.std()))
    print (d, "Spe = %.5f SenStd = %.2f " % (Specificity.mean(), Specificity.std()))
    mean_tpr = np.mean(tprs, axis=0)
    mean_tpr[-1] = 1.0
    mean_auc = auc(mean_fpr, mean_tpr)
    std_auc = np.std(aucs)
    if(i% 2 == 0):
      plt.plot(mean_fpr, mean_tpr,
               label=d +' Mean ROC (AUC = %0.2f $\pm$ %0.2f)' % (mean_auc, std_auc),
               lw=2, alpha=.8, linestyle=lines[i])
    else:
      plt.plot(mean_fpr, mean_tpr,
               label=d +' Mean ROC (AUC = %0.2f $\pm$ %0.2f)' % (mean_auc, std_auc),
               lw=2, alpha=.8)

    i = i +1

    std_tpr = np.std(tprs, axis=0)
    tprs_upper = np.minimum(mean_tpr + std_tpr, 1)
    tprs_lower = np.maximum(mean_tpr - std_tpr, 0)
    plt.fill_between(mean_fpr, tprs_lower, tprs_upper, color='grey', alpha=.2,
                     label=r'$\pm$ 1 std. dev.')
print('******************************************')
end = time.time()
temp = end-start
print(temp)
hours = temp//3600
temp = temp - 3600*hours
minutes = temp//60
seconds = temp - 60*minutes
print('%d:%d:%d' %(hours,minutes,seconds))
plt.xlim([-0.05, 1.05])
plt.ylim([-0.05, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title("Social Ski-Driver SSD-ENSVM results  ")
plt.legend(loc="lower right")
plt.show()